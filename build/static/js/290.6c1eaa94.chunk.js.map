{"version":3,"file":"static/js/290.6c1eaa94.chunk.js","mappings":"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","sources":["common/Button/index.tsx","components/ContentBlock/styles.ts","components/ContentBlock/index.tsx"],"sourcesContent":["import { StyledButton, Button2 } from \"./styles\"; // Importing both StyledButton and Button2\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\r\n  <>\r\n    <StyledButton color={color} onClick={onClick}>\r\n      {children}\r\n    </StyledButton>\r\n  </>\r\n);\r\n\r\n\r\n","import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 10rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\n\r\nexport const StyledRow = styled(Row)`\r\n  flex-direction: ${({ direction }: { direction: string }) =>\r\n    direction === \"left\" ? \"row\" : \"row-reverse\"};\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: #000;\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 21px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  t,\r\n  id,\r\n  direction,\r\n  titleSize,\r\n  contentSize,\r\n  className,\r\n  style,\r\n  minParaColors,\r\n  marginTop, // Add marginTop prop\r\n}: ContentBlockProps & {\r\n  titleSize?: string;\r\n  contentSize?: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  minParaColors?: string[];\r\n  marginTop?: string; // Define marginTop prop\r\n}) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection className={className} style={{ ...style, marginTop }}> {/* Apply marginTop to style */}\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow justify=\"space-between\" align=\"middle\" id={id} direction={direction}>\r\n          {icon && (\r\n            <Col lg={11} md={11} sm={12} xs={24}>\r\n              <SvgIcon src={icon} width=\"100%\" height=\"100%\" borderRadius=\"10px\" />\r\n            </Col>\r\n          )}\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <div className=\"introText\" style={{ fontSize: titleSize }}>\r\n                {t(title)}\r\n              </div>\r\n              <div >\r\n                {Array.isArray(content) ? (\r\n                  content.map((item, index) => (\r\n                    <MinPara key={index} style={{ fontSize: contentSize, color: minParaColors && minParaColors[index] }}>\r\n                      {t(item)}\r\n                    </MinPara>\r\n                  ))\r\n                ) : (\r\n                  <MinPara style={{ fontSize: contentSize }}>\r\n                    {t(content)}\r\n                  </MinPara>\r\n                )}\r\n              </div>\r\n              {direction === \"right\" ? (\r\n                <ButtonWrapper>\r\n                  {button &&\r\n                    button.map(\r\n                      (\r\n                        item: {\r\n                          color?: string;\r\n                          title: string;\r\n                        },\r\n                        id: number\r\n                      ) => {\r\n                        return (\r\n                          <Button\r\n                            key={id}\r\n                            color={item.color}\r\n                            onClick={() => scrollTo(\"about\")}\r\n                          >\r\n                            {t(item.title)}\r\n                          </Button>\r\n                        );\r\n                      }\r\n                    )}\r\n                </ButtonWrapper>\r\n              ) : (\r\n                <ServiceWrapper>\r\n                  <Row justify=\"space-between\">\r\n                    {section &&\r\n                      section.map(\r\n                        (\r\n                          item: {\r\n                            title: string;\r\n                            content: string | string[];\r\n                            icon: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Col key={id} span={11}>\r\n                              {/* {item.icon && (\r\n                                <SvgIcon\r\n                                  src={item.icon}\r\n                                  width=\"60px\"\r\n                                  height=\"60px\"\r\n                                />\r\n                              )} */}\r\n                              {/* <MinTitle>{t(item.title)}</MinTitle>\r\n                              <MinPara>{t(item.content)}</MinPara> */}\r\n                            </Col>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </Row>\r\n                </ServiceWrapper>\r\n              )}\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(ContentBlock);\r\n"],"names":["Button","_ref","color","children","onClick","_jsx","_Fragment","StyledButton","ContentSection","styled","_templateObject","_taggedTemplateLiteral","StyledRow","_templateObject2","Row","_templateObject3","direction","ContentWrapper","_templateObject4","ServiceWrapper","_templateObject5","MinPara","_templateObject6","_templateObject7","ButtonWrapper","_templateObject8","withTranslation","icon","title","content","section","button","t","id","titleSize","contentSize","className","style","minParaColors","marginTop","_jsxs","_objectSpread","Fade","triggerOnce","justify","align","Col","lg","md","sm","xs","SvgIcon","src","width","height","borderRadius","fontSize","Array","isArray","map","item","index","document","getElementById","scrollIntoView","behavior","scrollTo","span"],"sourceRoot":""}